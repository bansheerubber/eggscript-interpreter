include $(DEVKITPRO)/devkitA64/base_rules
include $(DEVKITPRO)/libnx/switch_rules

target = eggscript
library_target = libeggscript.a
library_include_c_target = include.c/ts.h
library_include_cpp_target = include.cpp/ts.h

LIBDIRS = $(LIBNX)
INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include)

LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

cclibs = -lpthread $(LIBPATHS) -lnx -lm
ARCH = -march=armv8-a+crc+crypto -mtune=cortex-a57 -mtp=soft
SWITCH = -ffunction-sections -fno-rtti
CPPFLAGS = -D__switch__ -O2 -Wall -Wno-switch -Wno-class-memaccess -Wno-delete-incomplete -Wno-attributes -Bsymbolic -fno-semantic-interposition -fPIE -fPIC $(ARCH) $(SWITCH)
LDFLAGS = -specs=$(DEVKITPRO)/libnx/switch.specs -g $(ARCH) -fPIE

cpp_source = $(shell find src -type f -name "*.cc" ! -path "src/include*")
cpp_source_tmp = $(subst src, tmp, $(cpp_source))
cpp_source_without = $(subst src\/, , $(cpp_source))

cpp_headers = $(shell find src -type f -name "*.h" ! -path "src/include*")
cpp_headers_tmp = $(subst src, tmp, $(cpp_headers))

cpp_objects = $(patsubst %.cc, %.o, $(cpp_source))
cpp_objects_tmp = $(patsubst %.cc, %.o, $(cpp_source_tmp))
cpp_objects_without = $(patsubst src\/, , $(cpp_source))

.PHONY: default clean

# force synchronization for preprocessor
default:
	@"$(MAKE)" -f Makefile.nx preprocessor --no-print-directory
	@"$(MAKE)" -f Makefile.nx dist/$(target) --no-print-directory

library:
	@"$(MAKE)" -f Makefile.nx preprocessor --no-print-directory
	@"$(MAKE)" -f Makefile.nx dist/$(library_target) --no-print-directory soflags="-fPIC" ldflags="-Wl,--version-script=libeggscript.map"

preprocessor:
	@echo -e "   PY      tools/preprocessor.py"
	@python3 tools/preprocessor.py

$(cpp_objects_tmp) : %.o : %.h
$(cpp_objects_tmp) : %.o : %.cc
	@mkdir -p $(dir $@)
	@echo -e "   CXX      $<"
	@$(CXX) $(CPPFLAGS) $(soflags) $(INCLUDE) -c $< -o $@

dist/$(target): $(cpp_objects_tmp)
	@mkdir -p $(dir dist/$(target))
	@echo -e "   CXX      $@"
	@$(CXX) $(cpp_objects_tmp) -Wall $(cclibs) $(LDFLAGS) -o $@
	@elf2nro $@ $@.nro

dist/$(library_target): $(cpp_objects_tmp)
	@mkdir -p $(dir dist/$(library_target))
	@echo -e "   CXX      $@"
	@$(CXX) $(cpp_objects_tmp) -Wall $(cclibs) $(LDFLAGS) -o $@
	@$(AR) rcs $(library_target) $(cpp_objects_tmp)
	@mv $(library_target) $@

test: dist/$(target)
	cd dist && ./$(target) --test

build-tests: dist/$(target)
	cd dist && ./$(target) --test --overwrite-results

clean:
	@echo -e "   RM      tmp"
	@rm -Rf tmp

	@echo -e "   RM      dist/$(library_include_c_target)"
	@rm -Rf dist/$(library_include_c_target)

	@echo -e "   RM      dist/$(library_include_cpp_target)"
	@rm -Rf dist/$(library_include_cpp_target)

	@echo -e "   RM      dist/$(target)"
	@rm -f dist/$(target)

	@echo -e "   RM      dist/$(library_target)"
	@rm -f dist/$(library_target)