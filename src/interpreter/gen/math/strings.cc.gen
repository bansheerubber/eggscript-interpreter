#if TS_INTERPRETER_PREFIX
	Entry* lvalue;
	Entry* rvalue;
	// we have to define lvalue first when working with prefix
	if(instruction.mathematics.lvalueEntry.type != entry::INVALID) {
		lvalue = &instruction.mathematics.lvalueEntry;
	}
	else {
		lvalue = &this->stack[this->stack.head - 1];
		this->pop();
	}

	if(instruction.mathematics.rvalueEntry.type != entry::INVALID) {
		rvalue = &instruction.mathematics.rvalueEntry;
	}
	else {
		rvalue = &this->stack[this->stack.head - 1];
		this->pop();
	}

	// final strings after converting type
	char* lvalueString = nullptr;
	char* rvalueString = nullptr;

	// if we need to delete the string if we converted from number to string
	bool deleteLValueString = false;
	bool deleteRValueString = false;

	// typecheck value
	if(lvalue->type == entry::STRING) {
		lvalueString = lvalue->stringData;
	}
	else if(lvalue->type == entry::OBJECT) {
		if(lvalue->objectData->object == nullptr) {
			lvalueString = this->emptyString;
			this->warning("trying to access deleted object\n");
		}
		else {
			lvalueString = numberToString(lvalue->objectData->object->id);
		}
		deleteLValueString = true;
	}
	else {
		lvalueString = numberToString(lvalue->numberData);
		deleteLValueString = true;
	}

	// typecheck value
	if(rvalue->type == entry::STRING) {
		rvalueString = rvalue->stringData;
	}
	else if(rvalue->type == entry::OBJECT) {
		if(rvalue->objectData->object == nullptr) {
			rvalueString = this->emptyString;
			this->warning("trying to access deleted object\n");
		}
		else {
			rvalueString = numberToString(rvalue->objectData->object->id);
		}
		deleteRValueString = true;
	}
	else {
		rvalueString = numberToString(rvalue->numberData);
		deleteRValueString = true;
	}
#else
	Entry* lvalue;
	Entry* rvalue;
	/* we have to define rvalue first when working with postfix */
	if(instruction.mathematics.rvalueEntry.type != entry::INVALID) {
		rvalue = &instruction.mathematics.rvalueEntry;
	}
	else {
		rvalue = &this->stack[this->stack.head - 1];
		this->pop();
	}
	
	if(instruction.mathematics.lvalueEntry.type != entry::INVALID) {
		lvalue = &instruction.mathematics.lvalueEntry;
	}
	else {
		lvalue = &this->stack[this->stack.head - 1];
		this->pop();
	}

	// final numbers after converting type
	char* lvalueString = nullptr;
	char* rvalueString = nullptr;

	// if we need to delete the string if we converted from number to string
	bool deleteLValueString = false;
	bool deleteRValueString = false;

	// typecheck value
	if(lvalue->type == entry::STRING) {
		lvalueString = lvalue->stringData;
	}
	else if(lvalue->type == entry::OBJECT) {
		if(lvalue->objectData->object == nullptr) {
			lvalueString = this->emptyString;
			this->warning("trying to access deleted object\n");
		}
		else {
			lvalueString = numberToString(lvalue->objectData->object->id);
		}
		deleteLValueString = true;
	}
	else {
		lvalueString = numberToString(lvalue->numberData);
		deleteLValueString = true;
	}

	// typecheck value
	if(rvalue->type == entry::STRING) {
		rvalueString = rvalue->stringData;
	}
	else if(rvalue->type == entry::OBJECT) {
		if(rvalue->objectData->object == nullptr) {
			rvalueString = this->emptyString;
			this->warning("trying to access deleted object\n");
		}
		else {
			rvalueString = numberToString(rvalue->objectData->object->id);
		}
		deleteRValueString = true;
	}
	else {
		rvalueString = numberToString(rvalue->numberData);
		deleteRValueString = true;
	}
#endif