#if TS_INTERPRETER_PREFIX
	// prefix interpretation
	Entry* lvalue;
	Entry* rvalue;
	// we have to define lvalue first when working with prefix
	if(instruction.mathematics.lvalueEntry.type != entry::INVALID) {
		lvalue = &instruction.mathematics.lvalueEntry;
	}
	else {
		lvalue = &this->stack.array[this->stack.head - 1];
		this->pop();
	}
	if(instruction.mathematics.rvalueEntry.type != entry::INVALID) {
		rvalue = &instruction.mathematics.rvalueEntry;
	}
	else {
		rvalue = &this->stack.array[this->stack.head - 1];
		this->pop();
	}

	// final numbers after converting type
	double lvalueNumber = 0;
	double rvalueNumber = 0;

	// typecheck value
	if(lvalue->type == entry::NUMBER) {
		lvalueNumber = lvalue->numberData;
	}
	else if(lvalue->type == entry::OBJECT) {
		if(lvalue->objectData->object == nullptr) {
			lvalueNumber = 0.0;
			this->warning("trying to access deleted object\n");
		}
		else {
			lvalueNumber = lvalue->objectData->object->id;
		}
	}
	else {
		lvalueNumber = stringToNumber(*lvalue->stringData);
	}

	// typecheck value
	if(rvalue->type == entry::NUMBER) {
		rvalueNumber = rvalue->numberData;
	}
	else if(rvalue->type == entry::OBJECT) {
		if(rvalue->objectData->object == nullptr) {
			rvalueNumber = 0.0;
			this->warning("trying to access deleted object\n");
		}
		else {
			rvalueNumber = rvalue->objectData->object->id;
		}
	}
	else {
		rvalueNumber = stringToNumber(*rvalue->stringData);
	}
#else
	// postfix interpretation
	Entry* lvalue;
	Entry* rvalue;
	// we have to define rvalue first when working with postfix
	if(instruction.mathematics.rvalueEntry.type != entry::INVALID) {
		rvalue = &instruction.mathematics.rvalueEntry;
	}
	else {
		rvalue = &this->stack.array[this->stack.head - 1];
		this->pop();
	}

	if(instruction.mathematics.lvalueEntry.type != entry::INVALID) {
		lvalue = &instruction.mathematics.lvalueEntry;
	}
	else {
		lvalue = &this->stack.array[this->stack.head - 1];
		this->pop();
	}

	// final numbers after converting type
	double lvalueNumber = 0;
	double rvalueNumber = 0;

	// typecheck value
	if(lvalue->type == entry::NUMBER) {
		lvalueNumber = lvalue->numberData;
	}
	else if(lvalue->type == entry::OBJECT) {
		if(lvalue->objectData->object == nullptr) {
			lvalueNumber = 0.0;
			this->warning("trying to access deleted object\n");
		}
		else {
			lvalueNumber = lvalue->objectData->object->id;
		}
	}
	else {
		lvalueNumber = stringToNumber(*lvalue->stringData);
	}

	// typecheck value
	if(rvalue->type == entry::NUMBER) {
		rvalueNumber = rvalue->numberData;
	}
	else if(rvalue->type == entry::OBJECT) {
		if(rvalue->objectData->object == nullptr) {
			rvalueNumber = 0.0;
			this->warning("trying to access deleted object\n");
		}
		else {
			rvalueNumber = rvalue->objectData->object->id;
		}
	}
	else {
		rvalueNumber = stringToNumber(*rvalue->stringData);
	}
#endif