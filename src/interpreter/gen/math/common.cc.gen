#if TS_INTERPRETER_PREFIX
	Entry* lvalue;
	Entry* rvalue;

	// we have to define lvalue first when working with prefix
	if(instruction.mathematics.lvalueEntry.type) {
		lvalue = &instruction.mathematics.lvalueEntry;
	}
	else if(instruction.mathematics.lvalueStackIndex < 0) {
		lvalue = &this->stack[this->stack.head - 1];
		this->pop();
	}
	else {
		lvalue = &this->stack[instruction.mathematics.lvalueStackIndex + this->stackFramePointer];
	}

	if(instruction.mathematics.rvalueEntry.type) {
		rvalue = &instruction.mathematics.rvalueEntry;
	}
	else if(instruction.mathematics.rvalueStackIndex < 0) {
		rvalue = &this->stack[this->stack.head - 1];
		this->pop();
	}
	else {
		rvalue = &this->stack[instruction.mathematics.rvalueStackIndex + this->stackFramePointer];
	}
#else
	Entry* lvalue;
	Entry* rvalue;
	
	// we have to define rvalue first when working with postfix
	if(instruction.mathematics.rvalueEntry.type) {
		rvalue = &instruction.mathematics.rvalueEntry;
	}
	else if(instruction.mathematics.rvalueStackIndex < 0) {
		rvalue = &this->stack[this->stack.head - 1];
		this->pop();
	}
	else {
		rvalue = &this->stack[instruction.mathematics.rvalueStackIndex + this->stackFramePointer];
	}

	if(instruction.mathematics.lvalueEntry.type) {
		lvalue = &instruction.mathematics.lvalueEntry;
	}
	else if(instruction.mathematics.lvalueStackIndex < 0) {
		lvalue = &this->stack[this->stack.head - 1];
		this->pop();
	}
	else {
		lvalue = &this->stack[instruction.mathematics.lvalueStackIndex + this->stackFramePointer];
	}
#endif