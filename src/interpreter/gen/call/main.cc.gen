if(foundFunction->isTSSL) {
	sl::Function* function = foundFunction->function;

	void* arguments[TS_ARG_COUNT];
	bool deleteArguments[TS_ARG_COUNT];
	// copy the same logic from ARGUMENT_ASSIGN instruction for consistency
	int actualArgumentCount = (int)this->stack[this->stack.head - 1].numberData; // get the amount of arguments used in the program
	int delta = function->argumentCount - actualArgumentCount;

	int count = 1;
	for(int i = function->argumentCount; i >= 1; i--) { // load arguments array backwards
		if(count > actualArgumentCount) { // TODO better error handling
			break;
		}
		else {
			relative_stack_location location = this->stack.head - 1 - i + delta;
			Entry &entry = this->stack[location];
			if(function->argumentTypes[count - 1] == sl::STRING) {
				if(entry.type == entry::NUMBER) {
					arguments[count - 1] = numberToString(entry.numberData);
					deleteArguments[count - 1] = true;
				}
				else if(entry.type == entry::OBJECT) {
					if(entry.objectData->object == nullptr) {
						arguments[count - 1] = getEmptyString();

						this->warning("trying to access deleted object\n");
					}
					else {
						arguments[count - 1] = numberToString(entry.objectData->object->id);	
					}

					deleteArguments[count - 1] = true;
				}
				else {
					arguments[count - 1] = entry.stringData;
					deleteArguments[count - 1] = false;
				}
			}
			else {
				if(entry.type == entry::NUMBER) {
					arguments[count - 1] = &entry.numberData;
					deleteArguments[count - 1] = false;
				}
				else if(entry.type == entry::OBJECT) {
					if(entry.objectData->object == nullptr) {
						arguments[count - 1] = new double(0);
						deleteArguments[count - 1] = true;

						this->warning("trying to access deleted object\n");
					}
					else {
						arguments[count - 1] = &entry.objectData->object->id;
						deleteArguments[count - 1] = false;
					}
				}
				else {
					arguments[count - 1] = new double(stringToNumber(entry.stringData));
					deleteArguments[count - 1] = true;
				}
			}
		}
		count++;
	}

	// pop the data
	for(int i = 0; i < actualArgumentCount + 1; i++) {
		this->pop();
	}

	void* returnValue = function->function(actualArgumentCount, arguments);
	if(function->returnType == sl::type::STRING) {
		this->push((char*)returnValue);
	}
	else if(function->returnType == sl::type::NUMBER) {
		this->push(*((double*)returnValue));
		delete (double*)returnValue;
	}
	else { // push void return value
		this->push(this->emptyEntry);
	}

	for(int i = 0; i < count - 1; i++) {
		if(deleteArguments[i]) {
			delete arguments[i];
		}
	}
}
else {
	this->pushInstructionContainer(foundFunction);
}