if(foundFunction->isTSSL) {
	sl::Function* function = foundFunction->function;

	// copy the same logic from ARGUMENT_ASSIGN instruction for consistency
	size_t head = this->stack.head;
	size_t actualArgumentCount = (size_t)this->stack[head - 1].numberData; // get the amount of arguments used in the program
	Entry argv[actualArgumentCount];
	for(size_t i = 0; i < actualArgumentCount; i++) {
		if(i < actualArgumentCount) {
			relative_stack_location location = head - 1 - (actualArgumentCount - i);
			greedyCopyEntry(this->stack[location], argv[i]);
			if(i < function->argumentCount) {
				convertToType(this, argv[i], function->argumentTypes[i]);
			}
		}
		else {
			argv[i] = Entry();
		}
	}

	this->pushTSSLFunctionFrame(methodTreeEntry, methodTreeEntryIndex);
	Entry* returnValue = function->function(this->engine, actualArgumentCount, argv);
	this->popFunctionFrame();

	// pop the data
	for(size_t i = 0; i < actualArgumentCount + 1; i++) {
		this->pop();
	}

	if(returnValue == nullptr) {
		this->pushEmpty(instruction.pushType);
	}
	else {
		this->push(*returnValue, instruction.pushType, true);
		delete returnValue;
	}
}
else {
	int numberOfArguments = (int)this->stack[this->stack.head - 1].numberData;
	this->pushFunctionFrame(
		foundFunction,
		list,
		packagedFunctionListIndex,
		methodTreeEntry,
		methodTreeEntryIndex,
		numberOfArguments + 1,
		foundFunction->variableCount
	);
}